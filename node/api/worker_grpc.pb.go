// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerAPIClient is the client API for WorkerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerAPIClient interface {
	HandleAggregateCommand(ctx context.Context, in *HandleAggregateCommandRequest, opts ...grpc.CallOption) (*HandleAggregateCommandResponse, error)
	HandleIntegrationCommand(ctx context.Context, in *HandleIntegrationCommandRequest, opts ...grpc.CallOption) (*HandleIntegrationCommandResponse, error)
	HandleProcessEvent(ctx context.Context, in *HandleProcessEventRequest, opts ...grpc.CallOption) (*HandleProcessEventResponse, error)
	HandleProcessTimeout(ctx context.Context, in *HandleProcessTimeoutRequest, opts ...grpc.CallOption) (*HandleProcessTimeoutResponse, error)
}

type workerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerAPIClient(cc grpc.ClientConnInterface) WorkerAPIClient {
	return &workerAPIClient{cc}
}

func (c *workerAPIClient) HandleAggregateCommand(ctx context.Context, in *HandleAggregateCommandRequest, opts ...grpc.CallOption) (*HandleAggregateCommandResponse, error) {
	out := new(HandleAggregateCommandResponse)
	err := c.cc.Invoke(ctx, "/veracity.node.v1.WorkerAPI/HandleAggregateCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) HandleIntegrationCommand(ctx context.Context, in *HandleIntegrationCommandRequest, opts ...grpc.CallOption) (*HandleIntegrationCommandResponse, error) {
	out := new(HandleIntegrationCommandResponse)
	err := c.cc.Invoke(ctx, "/veracity.node.v1.WorkerAPI/HandleIntegrationCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) HandleProcessEvent(ctx context.Context, in *HandleProcessEventRequest, opts ...grpc.CallOption) (*HandleProcessEventResponse, error) {
	out := new(HandleProcessEventResponse)
	err := c.cc.Invoke(ctx, "/veracity.node.v1.WorkerAPI/HandleProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) HandleProcessTimeout(ctx context.Context, in *HandleProcessTimeoutRequest, opts ...grpc.CallOption) (*HandleProcessTimeoutResponse, error) {
	out := new(HandleProcessTimeoutResponse)
	err := c.cc.Invoke(ctx, "/veracity.node.v1.WorkerAPI/HandleProcessTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerAPIServer is the server API for WorkerAPI service.
// All implementations should embed UnimplementedWorkerAPIServer
// for forward compatibility
type WorkerAPIServer interface {
	HandleAggregateCommand(context.Context, *HandleAggregateCommandRequest) (*HandleAggregateCommandResponse, error)
	HandleIntegrationCommand(context.Context, *HandleIntegrationCommandRequest) (*HandleIntegrationCommandResponse, error)
	HandleProcessEvent(context.Context, *HandleProcessEventRequest) (*HandleProcessEventResponse, error)
	HandleProcessTimeout(context.Context, *HandleProcessTimeoutRequest) (*HandleProcessTimeoutResponse, error)
}

// UnimplementedWorkerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedWorkerAPIServer struct {
}

func (UnimplementedWorkerAPIServer) HandleAggregateCommand(context.Context, *HandleAggregateCommandRequest) (*HandleAggregateCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAggregateCommand not implemented")
}
func (UnimplementedWorkerAPIServer) HandleIntegrationCommand(context.Context, *HandleIntegrationCommandRequest) (*HandleIntegrationCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleIntegrationCommand not implemented")
}
func (UnimplementedWorkerAPIServer) HandleProcessEvent(context.Context, *HandleProcessEventRequest) (*HandleProcessEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleProcessEvent not implemented")
}
func (UnimplementedWorkerAPIServer) HandleProcessTimeout(context.Context, *HandleProcessTimeoutRequest) (*HandleProcessTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleProcessTimeout not implemented")
}

// UnsafeWorkerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerAPIServer will
// result in compilation errors.
type UnsafeWorkerAPIServer interface {
	mustEmbedUnimplementedWorkerAPIServer()
}

func RegisterWorkerAPIServer(s grpc.ServiceRegistrar, srv WorkerAPIServer) {
	s.RegisterService(&WorkerAPI_ServiceDesc, srv)
}

func _WorkerAPI_HandleAggregateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAggregateCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).HandleAggregateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veracity.node.v1.WorkerAPI/HandleAggregateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).HandleAggregateCommand(ctx, req.(*HandleAggregateCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_HandleIntegrationCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleIntegrationCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).HandleIntegrationCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veracity.node.v1.WorkerAPI/HandleIntegrationCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).HandleIntegrationCommand(ctx, req.(*HandleIntegrationCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_HandleProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleProcessEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).HandleProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veracity.node.v1.WorkerAPI/HandleProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).HandleProcessEvent(ctx, req.(*HandleProcessEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_HandleProcessTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleProcessTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).HandleProcessTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veracity.node.v1.WorkerAPI/HandleProcessTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).HandleProcessTimeout(ctx, req.(*HandleProcessTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerAPI_ServiceDesc is the grpc.ServiceDesc for WorkerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veracity.node.v1.WorkerAPI",
	HandlerType: (*WorkerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleAggregateCommand",
			Handler:    _WorkerAPI_HandleAggregateCommand_Handler,
		},
		{
			MethodName: "HandleIntegrationCommand",
			Handler:    _WorkerAPI_HandleIntegrationCommand_Handler,
		},
		{
			MethodName: "HandleProcessEvent",
			Handler:    _WorkerAPI_HandleProcessEvent_Handler,
		},
		{
			MethodName: "HandleProcessTimeout",
			Handler:    _WorkerAPI_HandleProcessTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/dogmatiq/veracity/node/api/worker.proto",
}
