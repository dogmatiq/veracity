// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorAPIClient is the client API for CoordinatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorAPIClient interface {
	EnqueueCommand(ctx context.Context, in *EnqueueCommandRequest, opts ...grpc.CallOption) (*EnqueueCommandResponse, error)
}

type coordinatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorAPIClient(cc grpc.ClientConnInterface) CoordinatorAPIClient {
	return &coordinatorAPIClient{cc}
}

func (c *coordinatorAPIClient) EnqueueCommand(ctx context.Context, in *EnqueueCommandRequest, opts ...grpc.CallOption) (*EnqueueCommandResponse, error) {
	out := new(EnqueueCommandResponse)
	err := c.cc.Invoke(ctx, "/veracity.node.v1.CoordinatorAPI/EnqueueCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorAPIServer is the server API for CoordinatorAPI service.
// All implementations should embed UnimplementedCoordinatorAPIServer
// for forward compatibility
type CoordinatorAPIServer interface {
	EnqueueCommand(context.Context, *EnqueueCommandRequest) (*EnqueueCommandResponse, error)
}

// UnimplementedCoordinatorAPIServer should be embedded to have forward compatible implementations.
type UnimplementedCoordinatorAPIServer struct {
}

func (UnimplementedCoordinatorAPIServer) EnqueueCommand(context.Context, *EnqueueCommandRequest) (*EnqueueCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueCommand not implemented")
}

// UnsafeCoordinatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorAPIServer will
// result in compilation errors.
type UnsafeCoordinatorAPIServer interface {
	mustEmbedUnimplementedCoordinatorAPIServer()
}

func RegisterCoordinatorAPIServer(s grpc.ServiceRegistrar, srv CoordinatorAPIServer) {
	s.RegisterService(&CoordinatorAPI_ServiceDesc, srv)
}

func _CoordinatorAPI_EnqueueCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).EnqueueCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veracity.node.v1.CoordinatorAPI/EnqueueCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).EnqueueCommand(ctx, req.(*EnqueueCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorAPI_ServiceDesc is the grpc.ServiceDesc for CoordinatorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veracity.node.v1.CoordinatorAPI",
	HandlerType: (*CoordinatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueCommand",
			Handler:    _CoordinatorAPI_EnqueueCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/dogmatiq/veracity/node/api/coordinator.proto",
}
