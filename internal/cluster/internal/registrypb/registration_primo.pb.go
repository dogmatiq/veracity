// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v6.31.1
// source: github.com/dogmatiq/veracity/internal/cluster/internal/registrypb/registration.proto

package registrypb

import (
	uuidpb "github.com/dogmatiq/enginekit/protobuf/uuidpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type NodeBuilder struct {
	prototype Node
}

// NewNodeBuilder returns a builder that constructs [Node] messages.
func NewNodeBuilder() *NodeBuilder {
	return &NodeBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *NodeBuilder) From(x *Node) *NodeBuilder {
	b.prototype.Id = x.Id
	b.prototype.Addresses = x.Addresses
	return b
}

// Build returns a new [Node] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *NodeBuilder) Build() *Node {
	return &Node{
		Id:        b.prototype.Id,
		Addresses: b.prototype.Addresses,
	}
}

// WithId configures the builder to set the Id field to v,
// then returns b.
func (b *NodeBuilder) WithId(v *uuidpb.UUID) *NodeBuilder {
	b.prototype.Id = v
	return b
}

// WithAddresses configures the builder to set the Addresses field to v,
// then returns b.
func (b *NodeBuilder) WithAddresses(v []string) *NodeBuilder {
	b.prototype.Addresses = v
	return b
}

type RegistrationBuilder struct {
	prototype Registration
}

// NewRegistrationBuilder returns a builder that constructs [Registration] messages.
func NewRegistrationBuilder() *RegistrationBuilder {
	return &RegistrationBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *RegistrationBuilder) From(x *Registration) *RegistrationBuilder {
	b.prototype.Node = x.Node
	b.prototype.ExpiresAt = x.ExpiresAt
	return b
}

// Build returns a new [Registration] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *RegistrationBuilder) Build() *Registration {
	return &Registration{
		Node:      b.prototype.Node,
		ExpiresAt: b.prototype.ExpiresAt,
	}
}

// WithNode configures the builder to set the Node field to v,
// then returns b.
func (b *RegistrationBuilder) WithNode(v *Node) *RegistrationBuilder {
	b.prototype.Node = v
	return b
}

// WithExpiresAt configures the builder to set the ExpiresAt field to v,
// then returns b.
func (b *RegistrationBuilder) WithExpiresAt(v *timestamppb.Timestamp) *RegistrationBuilder {
	b.prototype.ExpiresAt = v
	return b
}

// SetId sets the x.Id field to v, then returns x.
func (x *Node) SetId(v *uuidpb.UUID) {
	x.Id = v
}

// SetAddresses sets the x.Addresses field to v, then returns x.
func (x *Node) SetAddresses(v []string) {
	x.Addresses = v
}

// SetNode sets the x.Node field to v, then returns x.
func (x *Registration) SetNode(v *Node) {
	x.Node = v
}

// SetExpiresAt sets the x.ExpiresAt field to v, then returns x.
func (x *Registration) SetExpiresAt(v *timestamppb.Timestamp) {
	x.ExpiresAt = v
}
