// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v6.32.1
// source: github.com/dogmatiq/veracity/internal/eventstream/internal/eventstreamjournal/record.proto

package eventstreamjournal

import (
	envelopepb "github.com/dogmatiq/enginekit/protobuf/envelopepb"
	proto "google.golang.org/protobuf/proto"
)

// TryGetEventsAppended returns x.Operation.EventsAppended if x.Operation is a [Record_EventsAppended].
// Otherwise, ok is false and v is the zero-value.
func (x *Record) TryGetEventsAppended() (v *EventsAppended, ok bool) {
	if x, ok := x.GetOperation().(*Record_EventsAppended); ok {
		return x.EventsAppended, true
	}
	return v, false
}

type RecordBuilder struct {
	prototype Record
}

// NewRecordBuilder returns a builder that constructs [Record] messages.
func NewRecordBuilder() *RecordBuilder {
	return &RecordBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *RecordBuilder) From(x *Record) *RecordBuilder {
	b.prototype.StreamOffsetBefore = x.StreamOffsetBefore
	b.prototype.StreamOffsetAfter = x.StreamOffsetAfter
	b.prototype.Operation = x.Operation
	return b
}

// Build returns a new [Record] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *RecordBuilder) Build() *Record {
	return &Record{
		StreamOffsetBefore: b.prototype.StreamOffsetBefore,
		StreamOffsetAfter:  b.prototype.StreamOffsetAfter,
		Operation:          b.prototype.Operation,
	}
}

// WithStreamOffsetBefore configures the builder to set the StreamOffsetBefore field to v,
// then returns b.
func (b *RecordBuilder) WithStreamOffsetBefore(v uint64) *RecordBuilder {
	b.prototype.StreamOffsetBefore = v
	return b
}

// WithStreamOffsetAfter configures the builder to set the StreamOffsetAfter field to v,
// then returns b.
func (b *RecordBuilder) WithStreamOffsetAfter(v uint64) *RecordBuilder {
	b.prototype.StreamOffsetAfter = v
	return b
}

// WithEventsAppended configures the builder to set the Operation field to a
// [Record_EventsAppended] value containing v, then returns b
func (b *RecordBuilder) WithEventsAppended(v *EventsAppended) *RecordBuilder {
	b.prototype.Operation = &Record_EventsAppended{EventsAppended: v}
	return b
}

type EventsAppendedBuilder struct {
	prototype EventsAppended
}

// NewEventsAppendedBuilder returns a builder that constructs [EventsAppended] messages.
func NewEventsAppendedBuilder() *EventsAppendedBuilder {
	return &EventsAppendedBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *EventsAppendedBuilder) From(x *EventsAppended) *EventsAppendedBuilder {
	b.prototype.Events = x.Events
	return b
}

// Build returns a new [EventsAppended] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *EventsAppendedBuilder) Build() *EventsAppended {
	return &EventsAppended{
		Events: b.prototype.Events,
	}
}

// WithEvents configures the builder to set the Events field to v,
// then returns b.
func (b *EventsAppendedBuilder) WithEvents(v []*envelopepb.Envelope) *EventsAppendedBuilder {
	b.prototype.Events = v
	return b
}

// MustSwitch_Record_Operation invokes one of the given functions based on
// the value of x.Operation.
//
// It panics if x.Operation is nil.
func MustSwitch_Record_Operation(
	x *Record,
	caseEventsAppended func(*EventsAppended),
) {
	switch v := x.GetOperation().(type) {
	case *Record_EventsAppended:
		caseEventsAppended(v.EventsAppended)
	default:
		panic("MustSwitch_Record_Operation: x.Operation is nil")
	}
}

// Switch_Record_Operation invokes one of the given functions based on
// the value of x.Operation.
//
// It calls none() if x.Operation is nil.
func Switch_Record_Operation(
	x *Record,
	caseEventsAppended func(*EventsAppended),
	none func(),
) {
	switch v := x.GetOperation().(type) {
	case *Record_EventsAppended:
		caseEventsAppended(v.EventsAppended)
	default:
		none()
	}
}

// MustMap_Record_Operation maps x.Operation to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Operation,
// and returns that function's result. It panics if x.Operation is nil.
func MustMap_Record_Operation[T any](
	x *Record,
	caseEventsAppended func(*EventsAppended) T,
) T {
	switch v := x.GetOperation().(type) {
	case *Record_EventsAppended:
		return caseEventsAppended(v.EventsAppended)
	default:
		panic("MustMap_Record_Operation: x.Operation is nil")
	}
}

// Map_Record_Operation maps x.Operation to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Operation,
// and returns that function's result. It calls none() if x.Operation is nil.
func Map_Record_Operation[T any](
	x *Record,
	caseEventsAppended func(*EventsAppended) T,
	none func() T,
) T {
	switch v := x.GetOperation().(type) {
	case *Record_EventsAppended:
		return caseEventsAppended(v.EventsAppended)
	default:
		return none()
	}
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*Record] to implement [encoding.BinaryMarshaler].
func (x *Record) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*Record] to implement [encoding.BinaryUnmarshaler].
func (x *Record) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*EventsAppended] to implement [encoding.BinaryMarshaler].
func (x *EventsAppended) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*EventsAppended] to implement [encoding.BinaryUnmarshaler].
func (x *EventsAppended) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// SetStreamOffsetBefore sets the x.StreamOffsetBefore field to v, then returns x.
func (x *Record) SetStreamOffsetBefore(v uint64) {
	x.StreamOffsetBefore = v
}

// SetStreamOffsetAfter sets the x.StreamOffsetAfter field to v, then returns x.
func (x *Record) SetStreamOffsetAfter(v uint64) {
	x.StreamOffsetAfter = v
}

// SetEventsAppended sets the x.Operation field to a [Record_EventsAppended] value containing v,
// then returns x.
func (x *Record) SetEventsAppended(v *EventsAppended) {
	x.Operation = &Record_EventsAppended{EventsAppended: v}
}

// SetEvents sets the x.Events field to v, then returns x.
func (x *EventsAppended) SetEvents(v []*envelopepb.Envelope) {
	x.Events = v
}
