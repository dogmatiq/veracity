// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: github.com/dogmatiq/veracity/internal/integration/internal/integrationjournal/record.proto

package integrationjournal

import (
	envelopepb "github.com/dogmatiq/enginekit/protobuf/envelopepb"
	uuidpb "github.com/dogmatiq/enginekit/protobuf/uuidpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Record is a journal record that stores an operation that was performed by an
// integration supervisor.
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*Record_CommandAccepted
	//	*Record_CommandHandled
	//	*Record_EventsAppendedToStream
	Operation     isRecord_Operation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetOperation() isRecord_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Record) GetCommandAccepted() *CommandAccepted {
	if x != nil {
		if x, ok := x.Operation.(*Record_CommandAccepted); ok {
			return x.CommandAccepted
		}
	}
	return nil
}

func (x *Record) GetCommandHandled() *CommandHandled {
	if x != nil {
		if x, ok := x.Operation.(*Record_CommandHandled); ok {
			return x.CommandHandled
		}
	}
	return nil
}

func (x *Record) GetEventsAppendedToStream() *EventsAppendedToStream {
	if x != nil {
		if x, ok := x.Operation.(*Record_EventsAppendedToStream); ok {
			return x.EventsAppendedToStream
		}
	}
	return nil
}

type isRecord_Operation interface {
	isRecord_Operation()
}

type Record_CommandAccepted struct {
	CommandAccepted *CommandAccepted `protobuf:"bytes,1,opt,name=command_accepted,json=commandAccepted,proto3,oneof"`
}

type Record_CommandHandled struct {
	CommandHandled *CommandHandled `protobuf:"bytes,2,opt,name=command_handled,json=commandHandled,proto3,oneof"`
}

type Record_EventsAppendedToStream struct {
	EventsAppendedToStream *EventsAppendedToStream `protobuf:"bytes,3,opt,name=events_appended_to_stream,json=eventsAppendedToStream,proto3,oneof"`
}

func (*Record_CommandAccepted) isRecord_Operation() {}

func (*Record_CommandHandled) isRecord_Operation() {}

func (*Record_EventsAppendedToStream) isRecord_Operation() {}

// CommandAccepted is an operation that indicates a command has been accepted
// for handling.
type CommandAccepted struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Command is the envelope containing the command to be handled.
	Command       *envelopepb.Envelope `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandAccepted) Reset() {
	*x = CommandAccepted{}
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAccepted) ProtoMessage() {}

func (x *CommandAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAccepted.ProtoReflect.Descriptor instead.
func (*CommandAccepted) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescGZIP(), []int{1}
}

func (x *CommandAccepted) GetCommand() *envelopepb.Envelope {
	if x != nil {
		return x.Command
	}
	return nil
}

// CommandHandled is an operation that indicates a command has been handled
// successfully.
type CommandHandled struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CommandId is the ID of the command that was handled.
	CommandId *uuidpb.UUID `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// Events is the list of events produced while handling the command, in
	// chronological order.
	Events []*envelopepb.Envelope `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	// EventStreamId is the ID of the stream to which the events will be appended.
	//
	// It is undefined if the command did not produce any events.
	EventStreamId *uuidpb.UUID `protobuf:"bytes,3,opt,name=event_stream_id,json=eventStreamId,proto3" json:"event_stream_id,omitempty"`
	// OffsetHint is the next offset of the stream, at the time it was selected
	// for use. The events produced by this message cannot possibly exist before
	// this offset.
	//
	// It is undefined if the command did not produce any events.
	OffsetHint    uint64 `protobuf:"varint,4,opt,name=offset_hint,json=offsetHint,proto3" json:"offset_hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandHandled) Reset() {
	*x = CommandHandled{}
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandHandled) ProtoMessage() {}

func (x *CommandHandled) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandHandled.ProtoReflect.Descriptor instead.
func (*CommandHandled) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescGZIP(), []int{2}
}

func (x *CommandHandled) GetCommandId() *uuidpb.UUID {
	if x != nil {
		return x.CommandId
	}
	return nil
}

func (x *CommandHandled) GetEvents() []*envelopepb.Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CommandHandled) GetEventStreamId() *uuidpb.UUID {
	if x != nil {
		return x.EventStreamId
	}
	return nil
}

func (x *CommandHandled) GetOffsetHint() uint64 {
	if x != nil {
		return x.OffsetHint
	}
	return 0
}

// EventsAppendedToStream is an operation that indicates that the events
// produced by a specific command have been appended to an event stream.
type EventsAppendedToStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CommandId is the ID of the command that produced the events.
	CommandId *uuidpb.UUID `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// EventStreamId is the ID of the stream to which the events were appended.
	EventStreamId *uuidpb.UUID `protobuf:"bytes,2,opt,name=event_stream_id,json=eventStreamId,proto3" json:"event_stream_id,omitempty"`
	// EventOffset is the offset of the first event.
	EventOffset   uint64 `protobuf:"varint,3,opt,name=event_offset,json=eventOffset,proto3" json:"event_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventsAppendedToStream) Reset() {
	*x = EventsAppendedToStream{}
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAppendedToStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAppendedToStream) ProtoMessage() {}

func (x *EventsAppendedToStream) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsAppendedToStream.ProtoReflect.Descriptor instead.
func (*EventsAppendedToStream) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescGZIP(), []int{3}
}

func (x *EventsAppendedToStream) GetCommandId() *uuidpb.UUID {
	if x != nil {
		return x.CommandId
	}
	return nil
}

func (x *EventsAppendedToStream) GetEventStreamId() *uuidpb.UUID {
	if x != nil {
		return x.EventStreamId
	}
	return nil
}

func (x *EventsAppendedToStream) GetEventOffset() uint64 {
	if x != nil {
		return x.EventOffset
	}
	return 0
}

var File_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto protoreflect.FileDescriptor

const file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDesc = "" +
	"\n" +
	"Zgithub.com/dogmatiq/veracity/internal/integration/internal/integrationjournal/record.proto\x12\x1fveracity.integration.journal.v1\x1a8github.com/dogmatiq/enginekit/protobuf/uuidpb/uuid.proto\x1a@github.com/dogmatiq/enginekit/protobuf/envelopepb/envelope.proto\"\xc6\x02\n" +
	"\x06Record\x12]\n" +
	"\x10command_accepted\x18\x01 \x01(\v20.veracity.integration.journal.v1.CommandAcceptedH\x00R\x0fcommandAccepted\x12Z\n" +
	"\x0fcommand_handled\x18\x02 \x01(\v2/.veracity.integration.journal.v1.CommandHandledH\x00R\x0ecommandHandled\x12t\n" +
	"\x19events_appended_to_stream\x18\x03 \x01(\v27.veracity.integration.journal.v1.EventsAppendedToStreamH\x00R\x16eventsAppendedToStreamB\v\n" +
	"\toperation\"E\n" +
	"\x0fCommandAccepted\x122\n" +
	"\acommand\x18\x01 \x01(\v2\x18.dogma.protobuf.EnvelopeR\acommand\"\xd6\x01\n" +
	"\x0eCommandHandled\x123\n" +
	"\n" +
	"command_id\x18\x01 \x01(\v2\x14.dogma.protobuf.UUIDR\tcommandId\x120\n" +
	"\x06events\x18\x02 \x03(\v2\x18.dogma.protobuf.EnvelopeR\x06events\x12<\n" +
	"\x0fevent_stream_id\x18\x03 \x01(\v2\x14.dogma.protobuf.UUIDR\reventStreamId\x12\x1f\n" +
	"\voffset_hint\x18\x04 \x01(\x04R\n" +
	"offsetHint\"\xae\x01\n" +
	"\x16EventsAppendedToStream\x123\n" +
	"\n" +
	"command_id\x18\x01 \x01(\v2\x14.dogma.protobuf.UUIDR\tcommandId\x12<\n" +
	"\x0fevent_stream_id\x18\x02 \x01(\v2\x14.dogma.protobuf.UUIDR\reventStreamId\x12!\n" +
	"\fevent_offset\x18\x03 \x01(\x04R\veventOffsetBOZMgithub.com/dogmatiq/veracity/internal/integration/internal/integrationjournalb\x06proto3"

var (
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescOnce sync.Once
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescData []byte
)

func file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescGZIP() []byte {
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescOnce.Do(func() {
		file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDesc), len(file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDesc)))
	})
	return file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDescData
}

var file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_goTypes = []any{
	(*Record)(nil),                 // 0: veracity.integration.journal.v1.Record
	(*CommandAccepted)(nil),        // 1: veracity.integration.journal.v1.CommandAccepted
	(*CommandHandled)(nil),         // 2: veracity.integration.journal.v1.CommandHandled
	(*EventsAppendedToStream)(nil), // 3: veracity.integration.journal.v1.EventsAppendedToStream
	(*envelopepb.Envelope)(nil),    // 4: dogma.protobuf.Envelope
	(*uuidpb.UUID)(nil),            // 5: dogma.protobuf.UUID
}
var file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_depIdxs = []int32{
	1, // 0: veracity.integration.journal.v1.Record.command_accepted:type_name -> veracity.integration.journal.v1.CommandAccepted
	2, // 1: veracity.integration.journal.v1.Record.command_handled:type_name -> veracity.integration.journal.v1.CommandHandled
	3, // 2: veracity.integration.journal.v1.Record.events_appended_to_stream:type_name -> veracity.integration.journal.v1.EventsAppendedToStream
	4, // 3: veracity.integration.journal.v1.CommandAccepted.command:type_name -> dogma.protobuf.Envelope
	5, // 4: veracity.integration.journal.v1.CommandHandled.command_id:type_name -> dogma.protobuf.UUID
	4, // 5: veracity.integration.journal.v1.CommandHandled.events:type_name -> dogma.protobuf.Envelope
	5, // 6: veracity.integration.journal.v1.CommandHandled.event_stream_id:type_name -> dogma.protobuf.UUID
	5, // 7: veracity.integration.journal.v1.EventsAppendedToStream.command_id:type_name -> dogma.protobuf.UUID
	5, // 8: veracity.integration.journal.v1.EventsAppendedToStream.event_stream_id:type_name -> dogma.protobuf.UUID
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() {
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_init()
}
func file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_init() {
	if File_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto != nil {
		return
	}
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes[0].OneofWrappers = []any{
		(*Record_CommandAccepted)(nil),
		(*Record_CommandHandled)(nil),
		(*Record_EventsAppendedToStream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDesc), len(file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_goTypes,
		DependencyIndexes: file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_depIdxs,
		MessageInfos:      file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_msgTypes,
	}.Build()
	File_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto = out.File
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_goTypes = nil
	file_github_com_dogmatiq_veracity_internal_integration_internal_integrationjournal_record_proto_depIdxs = nil
}
