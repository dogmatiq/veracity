// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v6.32.1
// source: github.com/dogmatiq/veracity/internal/integration/internal/integrationjournal/record.proto

package integrationjournal

import (
	envelopepb "github.com/dogmatiq/enginekit/protobuf/envelopepb"
	uuidpb "github.com/dogmatiq/enginekit/protobuf/uuidpb"
	proto "google.golang.org/protobuf/proto"
)

// TryGetCommandAccepted returns x.Operation.CommandAccepted if x.Operation is a [Record_CommandAccepted].
// Otherwise, ok is false and v is the zero-value.
func (x *Record) TryGetCommandAccepted() (v *CommandAccepted, ok bool) {
	if x, ok := x.GetOperation().(*Record_CommandAccepted); ok {
		return x.CommandAccepted, true
	}
	return v, false
}

// TryGetCommandHandled returns x.Operation.CommandHandled if x.Operation is a [Record_CommandHandled].
// Otherwise, ok is false and v is the zero-value.
func (x *Record) TryGetCommandHandled() (v *CommandHandled, ok bool) {
	if x, ok := x.GetOperation().(*Record_CommandHandled); ok {
		return x.CommandHandled, true
	}
	return v, false
}

// TryGetEventsAppendedToStream returns x.Operation.EventsAppendedToStream if x.Operation is a [Record_EventsAppendedToStream].
// Otherwise, ok is false and v is the zero-value.
func (x *Record) TryGetEventsAppendedToStream() (v *EventsAppendedToStream, ok bool) {
	if x, ok := x.GetOperation().(*Record_EventsAppendedToStream); ok {
		return x.EventsAppendedToStream, true
	}
	return v, false
}

type RecordBuilder struct {
	prototype Record
}

// NewRecordBuilder returns a builder that constructs [Record] messages.
func NewRecordBuilder() *RecordBuilder {
	return &RecordBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *RecordBuilder) From(x *Record) *RecordBuilder {
	b.prototype.Operation = x.Operation
	return b
}

// Build returns a new [Record] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *RecordBuilder) Build() *Record {
	return &Record{
		Operation: b.prototype.Operation,
	}
}

// WithCommandAccepted configures the builder to set the Operation field to a
// [Record_CommandAccepted] value containing v, then returns b
func (b *RecordBuilder) WithCommandAccepted(v *CommandAccepted) *RecordBuilder {
	b.prototype.Operation = &Record_CommandAccepted{CommandAccepted: v}
	return b
}

// WithCommandHandled configures the builder to set the Operation field to a
// [Record_CommandHandled] value containing v, then returns b
func (b *RecordBuilder) WithCommandHandled(v *CommandHandled) *RecordBuilder {
	b.prototype.Operation = &Record_CommandHandled{CommandHandled: v}
	return b
}

// WithEventsAppendedToStream configures the builder to set the Operation field to a
// [Record_EventsAppendedToStream] value containing v, then returns b
func (b *RecordBuilder) WithEventsAppendedToStream(v *EventsAppendedToStream) *RecordBuilder {
	b.prototype.Operation = &Record_EventsAppendedToStream{EventsAppendedToStream: v}
	return b
}

type CommandAcceptedBuilder struct {
	prototype CommandAccepted
}

// NewCommandAcceptedBuilder returns a builder that constructs [CommandAccepted] messages.
func NewCommandAcceptedBuilder() *CommandAcceptedBuilder {
	return &CommandAcceptedBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *CommandAcceptedBuilder) From(x *CommandAccepted) *CommandAcceptedBuilder {
	b.prototype.Command = x.Command
	return b
}

// Build returns a new [CommandAccepted] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *CommandAcceptedBuilder) Build() *CommandAccepted {
	return &CommandAccepted{
		Command: b.prototype.Command,
	}
}

// WithCommand configures the builder to set the Command field to v,
// then returns b.
func (b *CommandAcceptedBuilder) WithCommand(v *envelopepb.Envelope) *CommandAcceptedBuilder {
	b.prototype.Command = v
	return b
}

type CommandHandledBuilder struct {
	prototype CommandHandled
}

// NewCommandHandledBuilder returns a builder that constructs [CommandHandled] messages.
func NewCommandHandledBuilder() *CommandHandledBuilder {
	return &CommandHandledBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *CommandHandledBuilder) From(x *CommandHandled) *CommandHandledBuilder {
	b.prototype.CommandId = x.CommandId
	b.prototype.Events = x.Events
	b.prototype.EventStreamId = x.EventStreamId
	b.prototype.OffsetHint = x.OffsetHint
	return b
}

// Build returns a new [CommandHandled] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *CommandHandledBuilder) Build() *CommandHandled {
	return &CommandHandled{
		CommandId:     b.prototype.CommandId,
		Events:        b.prototype.Events,
		EventStreamId: b.prototype.EventStreamId,
		OffsetHint:    b.prototype.OffsetHint,
	}
}

// WithCommandId configures the builder to set the CommandId field to v,
// then returns b.
func (b *CommandHandledBuilder) WithCommandId(v *uuidpb.UUID) *CommandHandledBuilder {
	b.prototype.CommandId = v
	return b
}

// WithEvents configures the builder to set the Events field to v,
// then returns b.
func (b *CommandHandledBuilder) WithEvents(v []*envelopepb.Envelope) *CommandHandledBuilder {
	b.prototype.Events = v
	return b
}

// WithEventStreamId configures the builder to set the EventStreamId field to v,
// then returns b.
func (b *CommandHandledBuilder) WithEventStreamId(v *uuidpb.UUID) *CommandHandledBuilder {
	b.prototype.EventStreamId = v
	return b
}

// WithOffsetHint configures the builder to set the OffsetHint field to v,
// then returns b.
func (b *CommandHandledBuilder) WithOffsetHint(v uint64) *CommandHandledBuilder {
	b.prototype.OffsetHint = v
	return b
}

type EventsAppendedToStreamBuilder struct {
	prototype EventsAppendedToStream
}

// NewEventsAppendedToStreamBuilder returns a builder that constructs [EventsAppendedToStream] messages.
func NewEventsAppendedToStreamBuilder() *EventsAppendedToStreamBuilder {
	return &EventsAppendedToStreamBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *EventsAppendedToStreamBuilder) From(x *EventsAppendedToStream) *EventsAppendedToStreamBuilder {
	b.prototype.CommandId = x.CommandId
	b.prototype.EventStreamId = x.EventStreamId
	b.prototype.EventOffset = x.EventOffset
	return b
}

// Build returns a new [EventsAppendedToStream] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *EventsAppendedToStreamBuilder) Build() *EventsAppendedToStream {
	return &EventsAppendedToStream{
		CommandId:     b.prototype.CommandId,
		EventStreamId: b.prototype.EventStreamId,
		EventOffset:   b.prototype.EventOffset,
	}
}

// WithCommandId configures the builder to set the CommandId field to v,
// then returns b.
func (b *EventsAppendedToStreamBuilder) WithCommandId(v *uuidpb.UUID) *EventsAppendedToStreamBuilder {
	b.prototype.CommandId = v
	return b
}

// WithEventStreamId configures the builder to set the EventStreamId field to v,
// then returns b.
func (b *EventsAppendedToStreamBuilder) WithEventStreamId(v *uuidpb.UUID) *EventsAppendedToStreamBuilder {
	b.prototype.EventStreamId = v
	return b
}

// WithEventOffset configures the builder to set the EventOffset field to v,
// then returns b.
func (b *EventsAppendedToStreamBuilder) WithEventOffset(v uint64) *EventsAppendedToStreamBuilder {
	b.prototype.EventOffset = v
	return b
}

// MustSwitch_Record_Operation invokes one of the given functions based on
// the value of x.Operation.
//
// It panics if x.Operation is nil.
func MustSwitch_Record_Operation(
	x *Record,
	caseCommandAccepted func(*CommandAccepted),
	caseCommandHandled func(*CommandHandled),
	caseEventsAppendedToStream func(*EventsAppendedToStream),
) {
	switch v := x.GetOperation().(type) {
	case *Record_CommandAccepted:
		caseCommandAccepted(v.CommandAccepted)
	case *Record_CommandHandled:
		caseCommandHandled(v.CommandHandled)
	case *Record_EventsAppendedToStream:
		caseEventsAppendedToStream(v.EventsAppendedToStream)
	default:
		panic("MustSwitch_Record_Operation: x.Operation is nil")
	}
}

// Switch_Record_Operation invokes one of the given functions based on
// the value of x.Operation.
//
// It calls none() if x.Operation is nil.
func Switch_Record_Operation(
	x *Record,
	caseCommandAccepted func(*CommandAccepted),
	caseCommandHandled func(*CommandHandled),
	caseEventsAppendedToStream func(*EventsAppendedToStream),
	none func(),
) {
	switch v := x.GetOperation().(type) {
	case *Record_CommandAccepted:
		caseCommandAccepted(v.CommandAccepted)
	case *Record_CommandHandled:
		caseCommandHandled(v.CommandHandled)
	case *Record_EventsAppendedToStream:
		caseEventsAppendedToStream(v.EventsAppendedToStream)
	default:
		none()
	}
}

// MustMap_Record_Operation maps x.Operation to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Operation,
// and returns that function's result. It panics if x.Operation is nil.
func MustMap_Record_Operation[T any](
	x *Record,
	caseCommandAccepted func(*CommandAccepted) T,
	caseCommandHandled func(*CommandHandled) T,
	caseEventsAppendedToStream func(*EventsAppendedToStream) T,
) T {
	switch v := x.GetOperation().(type) {
	case *Record_CommandAccepted:
		return caseCommandAccepted(v.CommandAccepted)
	case *Record_CommandHandled:
		return caseCommandHandled(v.CommandHandled)
	case *Record_EventsAppendedToStream:
		return caseEventsAppendedToStream(v.EventsAppendedToStream)
	default:
		panic("MustMap_Record_Operation: x.Operation is nil")
	}
}

// Map_Record_Operation maps x.Operation to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Operation,
// and returns that function's result. It calls none() if x.Operation is nil.
func Map_Record_Operation[T any](
	x *Record,
	caseCommandAccepted func(*CommandAccepted) T,
	caseCommandHandled func(*CommandHandled) T,
	caseEventsAppendedToStream func(*EventsAppendedToStream) T,
	none func() T,
) T {
	switch v := x.GetOperation().(type) {
	case *Record_CommandAccepted:
		return caseCommandAccepted(v.CommandAccepted)
	case *Record_CommandHandled:
		return caseCommandHandled(v.CommandHandled)
	case *Record_EventsAppendedToStream:
		return caseEventsAppendedToStream(v.EventsAppendedToStream)
	default:
		return none()
	}
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*Record] to implement [encoding.BinaryMarshaler].
func (x *Record) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*Record] to implement [encoding.BinaryUnmarshaler].
func (x *Record) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*CommandAccepted] to implement [encoding.BinaryMarshaler].
func (x *CommandAccepted) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*CommandAccepted] to implement [encoding.BinaryUnmarshaler].
func (x *CommandAccepted) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*CommandHandled] to implement [encoding.BinaryMarshaler].
func (x *CommandHandled) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*CommandHandled] to implement [encoding.BinaryUnmarshaler].
func (x *CommandHandled) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*EventsAppendedToStream] to implement [encoding.BinaryMarshaler].
func (x *EventsAppendedToStream) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*EventsAppendedToStream] to implement [encoding.BinaryUnmarshaler].
func (x *EventsAppendedToStream) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// SetCommandAccepted sets the x.Operation field to a [Record_CommandAccepted] value containing v,
// then returns x.
func (x *Record) SetCommandAccepted(v *CommandAccepted) {
	x.Operation = &Record_CommandAccepted{CommandAccepted: v}
}

// SetCommandHandled sets the x.Operation field to a [Record_CommandHandled] value containing v,
// then returns x.
func (x *Record) SetCommandHandled(v *CommandHandled) {
	x.Operation = &Record_CommandHandled{CommandHandled: v}
}

// SetEventsAppendedToStream sets the x.Operation field to a [Record_EventsAppendedToStream] value containing v,
// then returns x.
func (x *Record) SetEventsAppendedToStream(v *EventsAppendedToStream) {
	x.Operation = &Record_EventsAppendedToStream{EventsAppendedToStream: v}
}

// SetCommand sets the x.Command field to v, then returns x.
func (x *CommandAccepted) SetCommand(v *envelopepb.Envelope) {
	x.Command = v
}

// SetCommandId sets the x.CommandId field to v, then returns x.
func (x *CommandHandled) SetCommandId(v *uuidpb.UUID) {
	x.CommandId = v
}

// SetEvents sets the x.Events field to v, then returns x.
func (x *CommandHandled) SetEvents(v []*envelopepb.Envelope) {
	x.Events = v
}

// SetEventStreamId sets the x.EventStreamId field to v, then returns x.
func (x *CommandHandled) SetEventStreamId(v *uuidpb.UUID) {
	x.EventStreamId = v
}

// SetOffsetHint sets the x.OffsetHint field to v, then returns x.
func (x *CommandHandled) SetOffsetHint(v uint64) {
	x.OffsetHint = v
}

// SetCommandId sets the x.CommandId field to v, then returns x.
func (x *EventsAppendedToStream) SetCommandId(v *uuidpb.UUID) {
	x.CommandId = v
}

// SetEventStreamId sets the x.EventStreamId field to v, then returns x.
func (x *EventsAppendedToStream) SetEventStreamId(v *uuidpb.UUID) {
	x.EventStreamId = v
}

// SetEventOffset sets the x.EventOffset field to v, then returns x.
func (x *EventsAppendedToStream) SetEventOffset(v uint64) {
	x.EventOffset = v
}
