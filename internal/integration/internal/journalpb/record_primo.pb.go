// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v4.24.4
// source: github.com/dogmatiq/veracity/internal/integration/internal/journalpb/record.proto

package journalpb

import (
	envelopepb "github.com/dogmatiq/enginekit/protobuf/envelopepb"
	uuidpb "github.com/dogmatiq/enginekit/protobuf/uuidpb"
)

// NewRecord returns a new [Record].
func NewRecord() *Record {
	return &Record{}
}

// NewCommandEnqueued returns a new [CommandEnqueued].
func NewCommandEnqueued() *CommandEnqueued {
	return &CommandEnqueued{}
}

// NewCommandHandled returns a new [CommandHandled].
func NewCommandHandled() *CommandHandled {
	return &CommandHandled{}
}

// NewEventsAppendedToStream returns a new [EventsAppendedToStream].
func NewEventsAppendedToStream() *EventsAppendedToStream {
	return &EventsAppendedToStream{}
}

// Switch_Record_Operation dispatches to one of the given functions based on
// which value of the [Record] message's "Operation" one-of group is populated.
//
// It panics if x.Operation field is nil; otherwise, it returns the value
// returned by the called function. If no return value is required, use a return
// type of [error] and always return nil.
func Switch_Record_Operation[T any](
	x *Record,
	caseCommandEnqueued func(*CommandEnqueued) T,
	caseCommandHandled func(*CommandHandled) T,
	caseEventsAppendedToStream func(*EventsAppendedToStream) T,
) T {
	switch v := x.Operation.(type) {
	case *Record_CommandEnqueued:
		return caseCommandEnqueued(v.CommandEnqueued)
	case *Record_CommandHandled:
		return caseCommandHandled(v.CommandHandled)
	case *Record_EventsAppendedToStream:
		return caseEventsAppendedToStream(v.EventsAppendedToStream)
	default:
		panic("Switch_Record_Operation: x.Operation is nil")
	}
}

// SetCommandEnqueued sets the x.Operation field to a [Operation] value containing v, then returns x.
func (x *Record) SetCommandEnqueued(v *CommandEnqueued) *Record {
	if x == nil {
		x = &Record{}
	}
	x.Operation = &Record_CommandEnqueued{CommandEnqueued: v}
	return x
}

// SetCommandHandled sets the x.Operation field to a [Operation] value containing v, then returns x.
func (x *Record) SetCommandHandled(v *CommandHandled) *Record {
	if x == nil {
		x = &Record{}
	}
	x.Operation = &Record_CommandHandled{CommandHandled: v}
	return x
}

// SetEventsAppendedToStream sets the x.Operation field to a [Operation] value containing v, then returns x.
func (x *Record) SetEventsAppendedToStream(v *EventsAppendedToStream) *Record {
	if x == nil {
		x = &Record{}
	}
	x.Operation = &Record_EventsAppendedToStream{EventsAppendedToStream: v}
	return x
}

// SetCommand sets the x.Command field to v, then returns x.
func (x *CommandEnqueued) SetCommand(v *envelopepb.Envelope) *CommandEnqueued {
	if x == nil {
		x = &CommandEnqueued{}
	}
	x.Command = v
	return x
}

// SetCommandId sets the x.CommandId field to v, then returns x.
func (x *CommandHandled) SetCommandId(v *uuidpb.UUID) *CommandHandled {
	if x == nil {
		x = &CommandHandled{}
	}
	x.CommandId = v
	return x
}

// SetEvents sets the x.Events field to v, then returns x.
func (x *CommandHandled) SetEvents(v []*envelopepb.Envelope) *CommandHandled {
	if x == nil {
		x = &CommandHandled{}
	}
	x.Events = v
	return x
}

// SetEventStreamId sets the x.EventStreamId field to v, then returns x.
func (x *CommandHandled) SetEventStreamId(v *uuidpb.UUID) *CommandHandled {
	if x == nil {
		x = &CommandHandled{}
	}
	x.EventStreamId = v
	return x
}

// SetLowestPossibleEventOffset sets the x.LowestPossibleEventOffset field to v, then returns x.
func (x *CommandHandled) SetLowestPossibleEventOffset(v uint64) *CommandHandled {
	if x == nil {
		x = &CommandHandled{}
	}
	x.LowestPossibleEventOffset = v
	return x
}

// SetCommandId sets the x.CommandId field to v, then returns x.
func (x *EventsAppendedToStream) SetCommandId(v *uuidpb.UUID) *EventsAppendedToStream {
	if x == nil {
		x = &EventsAppendedToStream{}
	}
	x.CommandId = v
	return x
}

// SetEventStreamId sets the x.EventStreamId field to v, then returns x.
func (x *EventsAppendedToStream) SetEventStreamId(v *uuidpb.UUID) *EventsAppendedToStream {
	if x == nil {
		x = &EventsAppendedToStream{}
	}
	x.EventStreamId = v
	return x
}

// SetEventOffset sets the x.EventOffset field to v, then returns x.
func (x *EventsAppendedToStream) SetEventOffset(v uint64) *EventsAppendedToStream {
	if x == nil {
		x = &EventsAppendedToStream{}
	}
	x.EventOffset = v
	return x
}
